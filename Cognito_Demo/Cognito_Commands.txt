Cognito Identity Pool Demo Commands
PART 1:

1.	Using the CloudShell, create the facts table:

aws dynamodb create-table --table-name facts --attribute-definitions \
AttributeName=fact_id,AttributeType=N --key-schema \
AttributeName=fact_id,KeyType=HASH \
--provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5

2.	 Populate the table with items:

wget https://raw.githubusercontent.com/ACloudGuru-Resources/course-aws-certified-developer-associate/main/Cognito_Demo/items.json

aws dynamodb batch-write-item --request-items file://items.json

3.	Launch an EC2 instance, enable HTTP access on port 80, and add the following user data script:

#!/bin/bash
dnf update -y
dnf install git -y
dnf install -y httpd
systemctl start httpd
systemctl enable httpd

(For Linux 2023, dnf is the new package manager and yum is going be deprecated eventually. )

4.	Test that the web server is running. Using the public IP address.

5. 	Connect to the instance, and copy the website files from GitHub:

sudo -su
git clone https://github.com/ACloudGuru-Resources/course-aws-certified-developer-associate

cd course-aws-certified-developer-associate/Cognito_Demo
cp index.html fact.jpg /var/www/html

PART 2:

6.	In the CloudShell, create new identity pool, named DynamoPool, allow unauthenticated entities:

aws cognito-identity create-identity-pool \
    --identity-pool-name DynamoPool \
    --allow-unauthenticated-identities \
    --output json

7. Download the permissions policy for the role we are going to create. 

wget https://raw.githubusercontent.com/ACloudGuru-Resources/course-aws-certified-developer-associate/main/Cognito_Demo/myCognitoPolicy.json

Copy the ID of the identity pool. Then update the myCognitoPolicy.json with the ID of the identity pool you just created. 

8.	Create an IAM role named Cognito_DynamoPoolUnauth:

aws iam create-role --role-name Cognito_DynamoPoolUnauth --assume-role-policy-document file://myCognitoPolicy.json --output json

9.	Grant the Cognito_DynamoPoolUnauth role read access to DynamoDB by attaching a managed policy (AmazonDynamoDBReadOnlyAccess).

aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess --role-name Cognito_DynamoPoolUnauth

10. 	Get the IAM role Amazon Resource Name (ARN).
aws iam get-role --role-name Cognito_DynamoPoolUnauth --output json

11.	Add our role to the Cognito Identity Pool. Replace the identity pool ID with your own identity pool ID and use the role ARN from the previous step.

aws cognito-identity set-identity-pool-roles \
--identity-pool-id "us-east-1:xxxxx‚Äù \
--roles unauthenticated=arn:aws:iam::xxxxx:role/Cognito_DynamoPoolUnauth --output json

12.	Double check it worked - Replace the identity pool ID with your own identity pool ID: 

aws cognito-identity get-identity-pool-roles  --identity-pool-id "us-east-1:xxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

13. 	We can now specify the Cognito credentials in our application - i.e. in the JavaScript section of our webpage!
Replace the identity pool ID with your own and the role ARN with your own role ARN. 
We are going to add this snippet to our index.html:


sudo vi /var/www/html

AWS.config.credentials = new AWS.CognitoIdentityCredentials({
IdentityPoolId: "us-east-1:2344c8f8-bc7d-4bf8-9836-c8be99916812",
RoleArn: "arn:aws:iam::xxxxxxxxxxxx:role/Cognito_DynamoPoolUnauth"
});
